b33551cd194a761c606fd8914aad3797
"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));
var _reduxThunk = _interopRequireDefault(require("redux-thunk"));
var actions = _interopRequireWildcard(require("../home.actions"));
var types = _interopRequireWildcard(require("../../../constants/ActionTypes"));
var _axios = _interopRequireDefault(require("axios"));
var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));


var mock = new _axiosMockAdapter.default(_axios.default);
var middlewares = [_reduxThunk.default];
var mockStore = (0, _reduxMockStore.default)(middlewares);

describe('async actions', function () {
  afterEach(function () {
    mock.restore();
  });

  it('creates FETCH_TODOS_SUCCESS when fetching todos has been done', function () {
    mock.onGet('/todos', { todos: ['do something'] });

    var expectedActions = [
    { type: 'FETCH_TODOS_REQUEST' },
    { type: 'FETCH_TODOS_SUCCESS', body: { todos: ['do something'] } }];

    var store = mockStore({ todos: [] });

    return store.dispatch(actions.fetchTodos()).then(function () {

      expect(store.getActions()).toEqual(expectedActions);
    });
  });
});